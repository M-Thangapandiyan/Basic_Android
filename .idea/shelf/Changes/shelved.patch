Index: java.js/src/Demo/BasicsKotlin.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Demo\n\nimport kotlin.reflect.KProperty0\n\n//import java.util.Random\n//\n//class Array{\n//    var s = arrayOf(\"1\",2,3.0)\n//}\n//fun main() {\n//    var s1 = Array()\n//    println(s1.s[2])\n//    for(x in s1.s){\n//        println(x)\n//    }\n//}\n//\n// when example program\n//fun main() {\n//    feedTheFish()\n//}\n//\n//fun feedTheFish() {\n//    val day = randomDay()\n//    var food = feedthefood(day)\n//    println (\"Today is $day and the fish eat $food\")\n//    val day = \"Monday\"\n//    var f = fe(day)\n//    println(fe(day))\n//}\n//\n//fun randomDay() : String {\n//    val week = arrayOf (\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\",\n//            \"Friday\", \"Saturday\", \"Sunday\")\n//\n//    println(\"nextint\" + week[Random().nextInt(week.size)])\n//    return week[Random().nextInt(week.size)]\n//}\n//\n//fun feedthefood(day : String) : String {\n//    var food : String\n//  when(day) {\n//        \"Monday\" -> food = \"seed\"\n//        \"Wednesday\" -> food =  \"redworms\"\n//        \"Thursday\" -> food = \"granules\"\n//        \"Friday\" -> food = \"mosquitoes\"\n//        \"Sunday\" -> food = \"plankton\"\n//        else -> food =\"nothing\"\n//    }\n//    return food\n//}\n//\n// short version\n//fun fe(day : String) : String {\n//    var dayIHave = day\n//    return when {\n//         (dayIHave==\"Monday\") -> \"seed\"\n//         (dayIHave == \"Saturday\" )-> \"redworms\"\n//        \"Thursday\" -> \"granules\"\n//        \"Friday\" ->\"mosquitoes\"\n//        \"Sunday\" -> \"plankton\"\n//        else -> \"nothing\"\n//    }\n//}\n//\n//\n//fun main() {\n//    swim()\n//    println(\"istoHot : ${hello(20)}\")\n//}\n//\n//fun swim(speed : String = \"fast\") {\n//    println(\"swimming $speed\")\n//}\n//\n//fun isto0Hot(tempareture : Int) = tempareture > 30\n//\n//fun hello(temperature: Int = 22) {\n//\n//}\n\n\n\n//val decorations = listOf (\"rock\", \"pagoda\", \"plastic plant\", \"alligator\", \"flowerpot\")\n//\n//fun main() {\n//    println( decorations. filter {it.startsWith(\"ro\")})\n//}\n\n//scope function(with,apply)\n\n//class Person(var name: String, var age: Int)\n//\n//fun main() {\n//    val person = Person(\"Alice\", 30)\n//    val person1 = Person(\"Al\", 10)\n//\n//    val result: String = with(person) {\n//        name = \"Bob\"\n//        \"Updated name: $name\"\n//    }\n//\n//    println(result)\n//    val resultPerson1 = with(person1) {\n//        name = \"Alice\"\n//        \"Updated name: $name\"\n//    }\n//\n////    val resultPerson1 = person1.apply {\n////        name = \"Alex\"\n////        age = 20\n////    }\n//\n//\n//    println(\"Updated name in person1: ${resultPerson1.name}\")\n////    println(\"Updated age in person1: ${resultPerson1.age}\")\n//}\n\n//filters(asSequance())\n\n//fun main() {\n//    val decorations = mutableListOf(\"rock\", \"pagoda\", \"plastic plant\", \"alligator\", \"flowerpot\")\n//\n//     decorations.filter { it[0] == 'p' }.map { println(\"hello = \" + it)}.toList()\n    // eager, creates a new list\n//    val eager = decorations.filter { it[0] == 'p' }\n//    println(\"eager: $eager\")\n//\n//    // lazy, will wait until asked to evaluate\n//    val filtered = decorations.asSequence().filter { it[0] == 'p' }\n//    println(\"filtered: $filtered\")\n//\n//    // force evaluation of the lazy list\n//    val newList = filtered.toList()\n//    println(\"new list: $newList\")\n//\n//\n//    val lazyMap = decorations.asSequence().map {\n//        println(\"access: $it\")\n//        it\n//    }\n//\n//    println(\"lazy: $lazyMap\")\n//    println(\"-----\")\n//    println(\"first: ${lazyMap.first()}\")\n//    println(\"-----\")\n//    println(\"all: ${lazyMap.toList()}\")\n\n//    val lazyMap2 = decorations.asSequence().filter {it[0] == 'p'}.map {println(\"access: $it\")\n//        it}\n//    println(\"filtered: ${lazyMap2.toList()}\")\n//}\n\n//example for create class\n\n//class Aquarium {\n//    var len: Int= 20\n//    var height : Int = 30\n//\n//    fun printSize() {\n//        println(\"Length: $len cm \" +\n//                \"Height: $height cm \")\n//    }\n//}\n//\n//fun buildAquarium() {\n//    var aq = Aquarium()\n//    aq.printSize()\n//    aq.height = 20\n//    aq.printSize()\n//}\n//\n//\n//fun main() {\n//    buildAquarium()\n//}\n\n\n//example for create  class with constructor\n\n//class Aquarium (len: Int = 20 , height : Int = 30){\n//var len: Int = len\n//var height : Int = height\n//    fun printSize() {\n//        println(\"Length: $len cm \" +\n//                \"Height: $height cm \")\n//    }\n//}\n//\n//fun bulidAquarium() {\n//    var aquarium = Aquarium()\n//    aquarium.printSize()\n//    var aquarium1 = Aquarium(len = 50)\n//    aquarium1.printSize()\n//    var aquarium2 = Aquarium(len = 50, height = 60)\n//    aquarium2.printSize()\n//\n//}\n//\n//fun main() {\n//    bulidAquarium()\n//}\n\n\n// example for open class\n\n//open class Animal(val species: String) {\n//    open fun makeSound() {\n//        println(\"The $species makes a generic sound.\")\n//    }\n//}\n//\n//class Dog : Animal(\"Dog\") {\n//    override fun makeSound() {\n//        println(\"The Dog barks!\")\n//    }\n//}\n\n//fun main() {\n//    val animal = Animal(\"Unknown\")\n//    animal.makeSound()\n//\n//    val dog = Dog()\n//    dog.makeSound()\n//}\n\n// example for open modifier ()\n//open class ExampleOpenClass(val open : String) {\n//\n//    init {\n//        println(\"hello world\")\n//    }\n//    open fun openFunction(){\n//        println(\" $open open function\")\n//    }\n//}\n//\n//class ExampleOpenClass1: ExampleOpenClass(\"h\") {\n//    override fun openFunction(){\n//        println(\"open function\")\n//    }\n//}\n//fun main(){\n//    val exampleopenclass = ExampleOpenClass(\"Overrided\")\n//    exampleopenclass.openFunction()\n//\n//    val exampleopenclass2 = ExampleOpenClass1()\n//    exampleopenclass2.openFunction()\n//}\n\n//example for get and set function\n\n//fun main(){\n//    val s = VolumeCalculator(20,20,30)\n//    println(s.volume)\n//    println(s.a)\n//}\n\n\n//const val a = 10\n//\n//const val b =11\n//fun  main(){\n//    var c = a+ b\n//    println(c)\n//}\n\n//public class A {\n//     fun someFunction() {\n//        println(\"Function in class A\")\n//    }\n//}\n//\n//class B : A() {\n//    fun someFunction1() {\n//        println(\"Function in class B\")\n//    }\n//}\n\n\n\n\n//data class Person(val name: String, val age: Int)\n//\n//fun main() {\n//    val person1 = Person(\"Alice\", 30)\n//    val person2 = Person(\"Alice\", 30)\n//    val person3 = Person(\"Bob\", 25)\n//\n//    println(\"person1 == person2: ${person1.equals(person2)}\")\n//    println(\"person1 == person3: ${person1.equals(person3)}\")\n//\n//    println(\"HashCode of person1: ${person1.hashCode()}\")\n//    println(\"HashCode of person2: ${person2.hashCode()}\")\n//    println(\"HashCode of person3: ${person3.hashCode()}\")\n//    println(\"Custom toString(): ${person1.age.toString()}\") // Explicit call to overridden toString()\n//\n//    val(name,age) = person2\n//\n//    println(\"name\" + name + \"age\" + age)\n//    println(\"name = $name and age = $age\")\n//\n//    val person5 = Person(\"Alice\", 30)\n//\n//    val person6 = person1.copy(name = \"j\",age = 25)\n//    println(\"Original Person: $person5\")\n//    println(\"Copied Person with modified age: $person6\")\n//}\n\n//data class Book(\n//        val title: String,\n//        val author: String,\n//        val genres: ArrayList<String>\n//)\n//\n//fun main() {\n//\n//    val bookGenres = arrayListOf(\"Fiction\", \"Mystery\", \"Thriller\")\n//\n//    val book = Book(\"The Da Vinci Code\", \"Dan Brown\", bookGenres)\n//\n//    val (title, author, genres) = book\n//\n//    println(\"Book Title: $title\")\n//    println(\"Author: $author\")\n//    println(\"Genres: ${genres.joinToString(\", \")}\")\n//\n//    genres.add(\"Adventure\")\n//\n//    println(\"\\nModified Genres: ${genres.joinToString(\", \")}\")\n//}\n\n\n\n//sealed class Number{\n//    class Number1 (val num1: Int) : Number()\n//    class Number2(val num2 : Int) : Number()\n//}\n//\n//fun demo(number: Number) {\n//    when(number){\n//        is Number.Number1 -> println(\"this is ${number.num1}\")\n//        is Number.Number2-> println(\"this is number2\")\n//    }\n//}\n//\n//fun main() {\n//    val n = Number.Number1(2)\n//    val n1= Number.Number2(4)\n//    demo(n)\n//    demo(n1)\n//}\n\n\n\n// Example for ComponentN()\n\n\n//data class Number (val num1 : Int, val num2:Int, val num4: java.util.ArrayList<Int>)\n//\n//fun main(){\n//\n//    val num4 = arrayListOf(11,2,1)\n//\n//    val a = Number(2,2, num4)\n//\n//   val(num1,num2, num3) = a\n//\n//    println(num3)\n//}\n\n\n\n//val addition: (Int, Int) -> Int = { a, b -> a + b }\n//\n//fun higherOrder(addition: (Int, Int) -> Int): (Int, Int) -> Int {\n//    return ::multiply\n//}\n//\n//fun multiply(): (Int, Int) -> Int = { a, b -> a * b }\n//\n//fun main() {\n//    val result = higherOrder(addition)(3, 4)\n//    println(\"Result of multiplication: $result\")\n//}\n\n\n//val addition: (Int, Int) -> Int = { a, b -> a + b }\n//\n//fun higherOrder(addition: (Int, Int) -> Int): (Int, Int) -> Int {\n//    return { x, y -> addition(x, y) * 2 }\n//}\n//\n//fun main() {\n//    val result = higherOrder(addition)\n//    println(\"Result: $result\")\n//}\n\n//Example for higher order function\n\nfun addition(a: Int, b: Int): Int {\n    return a+b\n}\n\nfun higher() : ((Int,Int) -> Int) {\n    return ::addition\n}\n\nfun main() {\n    val multiply = higher()\n    val result = multiply(2,4)\n    println(\"The multiplication of two numbers is: $result\")\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/java.js/src/Demo/BasicsKotlin.kt b/java.js/src/Demo/BasicsKotlin.kt
--- a/java.js/src/Demo/BasicsKotlin.kt	(revision c1818557b2a138873f11fe267fedcfe3cd203d86)
+++ b/java.js/src/Demo/BasicsKotlin.kt	(date 1701082450838)
@@ -398,16 +398,26 @@
 
 //Example for higher order function
 
-fun addition(a: Int, b: Int): Int {
-    return a+b
-}
-
-fun higher() : ((Int,Int) -> Int) {
-    return ::addition
-}
+const val OS_TYPE = "Windows"
 
 fun main() {
-    val multiply = higher()
-    val result = multiply(2,4)
-    println("The multiplication of two numbers is: $result")
-}
\ No newline at end of file
+    val a = 10
+    print("h = " + a)
+    println(getMessageForOS("Windows"))
+    println(getMessageForOS("Linux"))
+    val anotherA = "hello"
+    println("h = " + anotherA)
+}
+
+fun getMessageForOS(os: String): String {
+    print(OS_TYPE)
+    val a = 12
+    println(OS_TYPE)
+    print(a)
+
+    return when (os) {
+        OS_TYPE -> "You are using Windows OS"
+        else -> "OS not recognized"
+    }
+}
+
